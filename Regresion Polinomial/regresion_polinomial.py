# -*- coding: utf-8 -*-
"""Regresion Polinomial

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yMI3r03bOsyPn5Em5LmkQdPi4M2FLC13
"""

### importar las librerias ###
import numpy as np
from sklearn import datasets, linear_model
import matplotlib.pyplot as plt

### prepartar la data ###

# importo los datos de la misma libreria de scikit-learn
boston = datasets.load_boston()
print(boston)
print()

### Entendimeinto de la data ###

# verifico la informacion contenida en el dataser
print('informacion en el dataset:')
print(boston.keys())
print()

# verifico la cantidad de datos que hay en los dataset
print('candidad de datos:')
print(boston.data.shape)
print()

# verifico la informacion de las columnas
print('nombres de la columnas:')
print(boston.feature_names)

### preparar la data para la regresion polinomial ###

#selecciono solamente la columna 6 del dataset
X_p = boston.data[:, np.newaxis, 5]

# defino los datos correspondiente a las etiquetas
y_p = boston.target

# grafico los datos correspondientes
plt.scatter(X_p, y_p)
plt.show()

### Implementacion de regresion polinomial ###

from sklearn.model_selection import train_test_split

# separo los datos de "train" en entrenamiento y prueba para probar los algoritmos
X_train_p, X_test_p, y_train_p, y_test_p = train_test_split(X_p, y_p, test_size=0.2)

from sklearn.preprocessing import PolynomialFeatures

# se define el grado del polinomio
poli_reg = PolynomialFeatures(degree = 2)

# se transforma las caracteristocas existentes en caracteristicas de mayor grado
X_train_poli = poli_reg.fit_transform(X_train_p)
X_test_poli = poli_reg.fit_transform(X_test_p)

# defino el algoritmo a utilizar
pr = linear_model.LinearRegression()

# entreno el modelo
pr.fit(X_train_poli, y_train_p)

# realizo una prediccion
Y_pred_pr = pr.predict(X_test_poli)

# graficar los datos juntos con el modelo
plt.scatter(X_test_p, y_test_p)
plt.plot(X_test_p, Y_pred_pr, color='red', linewidth=3)
plt.show()

print()
print('DATOS DEL MODELO REGRESION POLINOMIAL')
print()

print('valor de la pendiente o coeficiente "a":')
print(pr.coef_)

print('valor de la interseccion o coeficiente "b":')
print(pr.intercept_)

print('precision del modelo')
print(pr.score(X_train_poli, y_train_p))