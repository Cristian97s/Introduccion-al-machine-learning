# -*- coding: utf-8 -*-
"""Bosques Aleatorios

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t0WyAJfFjAHCERzxP7BMXM-INyD-82Zw
"""

### LIBRERIAS A UTILZAR ###

#se importan las librerias a utilizar
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets

### PREPARAR LA DATA ###

#importar los datos de la misma libreria de scikit-learn
boston = datasets.load_boston()
print(boston)
print()

### ENTENDIMIENTO DE LA DATA ###

#verificacion de la informacion contenida en el dataset
print('Informacion en el dataset:')
print(boston.keys())
print()

#verificacion de la cantidad de datos que hay en los dataset
print('Cantidad de datos:')
print(boston.data.shape)
print()

#verificacion de la informacion de las columnas
print('Nombres columnas:')
print(boston.feature_names)

#### PREPARAR LA DATA A LOS BOSQUES ALEATORIOS REGRESION ###

#seleccionar solamente la columna 6 del dataset
X_bar = boston.data[:, np.newaxis, 5]

#defino los datos correspondientes a las etiquetas
y_bar = boston.target

#grafica de los datos correspondientes
plt.scatter(X_bar, y_bar)
plt.show()

### IMPLEMENTACION DE BOSQUES ALEATORIOS REGRESION ###

from sklearn.model_selection import train_test_split

#separacion de los datos "train" en entrenamineto y prueba para probar los algoritmos
X_train, X_test, y_train, y_test = train_test_split(X_bar, y_bar, test_size=0.2)

from sklearn.ensemble import RandomForestRegressor

#Definir el algoritmo a utilizar
bar = RandomForestRegressor(n_estimators= 300, max_depth= 8)

#Entremamiento del modelo
bar.fit(X_train, y_train)

#relizacion de la prediccion
Y_pred = bar.predict(X_test)

#grafica de los datos de pruebas junto con la prediccion
X_grid = np.arange(min(X_test), max(X_test), 0.1)
X_grid = X_grid.reshape(len(X_grid),1)
plt.scatter(X_test, y_test)
plt.plot(X_grid, bar.predict(X_grid), color='red', linewidth=3)
plt.show()

print('DATOS DEL MODELO BOSQUES ALEATORIOS REGRESION')
print()
print('Precision del modelo:')
print(bar.score(X_train, y_train))

